#version 460 core
layout (local_size_x = 1,local_size_y = 1) in;
layout(rgba32f,binding=0) uniform image2D img_output;

const int imageWidth = 512;
const int imageHeight = 256;

const float focalLength = 1.0f;
struct Ray
{
    vec3 pos;
    vec3 direction;
};

struct Sphere
{
    vec3 center;
    float radius;
};

struct HitRecord
{
    bool ishit;
    vec3 p;
    vec3 norm;
    float t;
};

Ray Rayinit(vec3 pos,vec3 d)
{
    Ray ray;
    ray.pos = pos;
    ray.direction = d;
    return ray;
}
vec3 Rayat(Ray ray,float t)
{
    return ray.pos + t * ray.direction;
}

HitRecord hitSphere(Sphere sphere,Ray r)
{
    HitRecord hit_record;
    vec3 oc = r.pos - sphere.center;
    float a = dot(r.direction, r.direction);
    float half_b = dot(oc,r.direction);
    float c = dot(oc, oc) - sphere.radius*sphere.radius;
    float discriminant = half_b*half_b - a*c;
    
    if(discriminant<0){
        hit_record.ishit = false;
        return hit_record;
    }
    
    float sqrtd = sqrt(discriminant);
    float root = (-half_b-sqrtd)/a;

    hit_record.t = root;
    hit_record.p = Rayat(r,root);
    hit_record.norm = (hit_record.p-sphere.center)/sphere.radius;


    return hit_record;
    
}
    

vec3 backgroundColor(Ray ray)
{
    // Sphere
    Sphere sphere;
    sphere.center=vec3(0,0,-1.f);
    sphere.radius = 0.5f;

    float t = hitSphere(sphere,ray);
    if(t>0){
        vec3 color = normalize(Rayat(ray,t)-vec3(0,0,-1));
        return 0.5*vec3(color.x+1,color.y+1,color.z+1);
    }

    sphere.center = vec3(0,-100.5,-1);
    sphere.radius = 100.f;
    t = hitSphere(sphere,ray);
    if(t>0){
        return 0.5*normalize(vec3(1,1,1));
    }

    vec3 unit_direction = normalize(ray.direction);
    t = 0.5 * (unit_direction.y + 1.0);
    return (1.0 - t) * vec3(1.0, 1.0, 1.0) + t * vec3(0.5, 0.7, 1.0);
}

void main()
{
    // image
    const float aspect_ratio = 512.0 / 256.0;
    const int image_width = imageWidth;
    const int image_height = int(image_width / aspect_ratio);
 
    ivec2 pixel_coords = ivec2(gl_GlobalInvocationID.xy);
    ivec2 dims = imageSize(img_output);

    float scale_x = pixel_coords.x / float(dims.x);
    float scale_y = pixel_coords.y / float(dims.y);

    // Camera

    float viewport_height = 2;
    float viewport_width = aspect_ratio *viewport_height;
    vec3 origin = vec3(0, 0, 0);
    
    vec3 horizontal = vec3(viewport_width,0,0);
    vec3 veritical  = vec3(0,viewport_height,0);
    vec3 lower_left_cornor = origin - horizontal /2 - veritical/2 - vec3(0,0,focalLength);

    vec3 pos = lower_left_cornor+scale_x*horizontal+scale_y*veritical-origin;   
    

    Ray r = Rayinit(origin, pos);
    vec4 pixel = vec4(backgroundColor(r),1.f);
    
    imageStore(img_output, pixel_coords, pixel);
    
}